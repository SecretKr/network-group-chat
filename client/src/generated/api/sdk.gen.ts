// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { GetData, GetApiHealthData, PostApiV1AuthRegisterData, PostApiV1AuthLoginData, GetApiV1AuthMeData, GetApiV1AuthLogoutData, GetApiV1ChatData, PostApiV1ChatData, GetApiV1ChatGroupData, PostApiV1ChatGroupData, GetApiV1ChatGroupAllData, PutApiV1ChatGroupAddData, DeleteApiV1ChatByIdData, GetApiV1ChatByIdData, PutApiV1ChatByIdData, PutApiV1ChatByIdLeaveData, GetApiV1ChatByIdMessageschatData, GetApiV1MessageData, PostApiV1MessageData, DeleteApiV1MessageByIdData, GetApiV1MessageByIdData, PutApiV1MessageByIdData } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const get = <ThrowOnError extends boolean = false>(options?: Options<GetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};

export const getApiHealth = <ThrowOnError extends boolean = false>(options?: Options<GetApiHealthData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/api/health',
        ...options
    });
};

export const postApiV1AuthRegister = <ThrowOnError extends boolean = false>(options?: Options<PostApiV1AuthRegisterData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/api/v1/auth/register',
        ...options
    });
};

export const postApiV1AuthLogin = <ThrowOnError extends boolean = false>(options?: Options<PostApiV1AuthLoginData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/api/v1/auth/login',
        ...options
    });
};

export const getApiV1AuthMe = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1AuthMeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/api/v1/auth/me',
        ...options
    });
};

export const getApiV1AuthLogout = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1AuthLogoutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/api/v1/auth/logout',
        ...options
    });
};

export const getApiV1Chat = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1ChatData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/api/v1/chat/',
        ...options
    });
};

export const postApiV1Chat = <ThrowOnError extends boolean = false>(options?: Options<PostApiV1ChatData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/api/v1/chat/',
        ...options
    });
};

export const getApiV1ChatGroup = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1ChatGroupData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/api/v1/chat/group',
        ...options
    });
};

export const postApiV1ChatGroup = <ThrowOnError extends boolean = false>(options?: Options<PostApiV1ChatGroupData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/api/v1/chat/group',
        ...options
    });
};

export const getApiV1ChatGroupAll = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1ChatGroupAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/api/v1/chat/group/all',
        ...options
    });
};

export const putApiV1ChatGroupAdd = <ThrowOnError extends boolean = false>(options?: Options<PutApiV1ChatGroupAddData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        url: '/api/v1/chat/group/add',
        ...options
    });
};

export const deleteApiV1ChatById = <ThrowOnError extends boolean = false>(options: Options<DeleteApiV1ChatByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        url: '/api/v1/chat/{id}',
        ...options
    });
};

export const getApiV1ChatById = <ThrowOnError extends boolean = false>(options: Options<GetApiV1ChatByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/api/v1/chat/{id}',
        ...options
    });
};

export const putApiV1ChatById = <ThrowOnError extends boolean = false>(options: Options<PutApiV1ChatByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        url: '/api/v1/chat/{id}',
        ...options
    });
};

export const putApiV1ChatByIdLeave = <ThrowOnError extends boolean = false>(options: Options<PutApiV1ChatByIdLeaveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        url: '/api/v1/chat/{id}/leave',
        ...options
    });
};

export const getApiV1ChatByIdMessageschat = <ThrowOnError extends boolean = false>(options: Options<GetApiV1ChatByIdMessageschatData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/api/v1/chat/{id}/messageschat',
        ...options
    });
};

export const getApiV1Message = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1MessageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/api/v1/message/',
        ...options
    });
};

export const postApiV1Message = <ThrowOnError extends boolean = false>(options?: Options<PostApiV1MessageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/api/v1/message/',
        ...options
    });
};

export const deleteApiV1MessageById = <ThrowOnError extends boolean = false>(options: Options<DeleteApiV1MessageByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        url: '/api/v1/message/{id}',
        ...options
    });
};

export const getApiV1MessageById = <ThrowOnError extends boolean = false>(options: Options<GetApiV1MessageByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/api/v1/message/{id}',
        ...options
    });
};

export const putApiV1MessageById = <ThrowOnError extends boolean = false>(options: Options<PutApiV1MessageByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        url: '/api/v1/message/{id}',
        ...options
    });
};